buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "io.freefair.gradle:lombok-plugin:5.3.3.2"
        classpath "net.serenity-bdd:serenity-gradle-plugin:2.6.0"
    }
}

plugins {
    id "java"
    id "jacoco"
    id "io.freefair.lombok" version "5.3.3.2"
    id "org.sonarqube" version "3.3"
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: "io.freefair.lombok"
apply plugin: 'net.serenity-bdd.aggregator'

description = 'Framework for Automation'
version '1.0-SNAPSHOT'

defaultTasks 'clean','test','aggregate'

repositories {
    mavenCentral()
}

ext {
    serenityCoreVersion = '2.6.0'
    serenityCucumberVersion = '2.6.0'
    junitVersion = '4.13.2'
    jacksonVersion = '2.14.0'
}

dependencies {
    implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
    implementation 'org.apache.logging.log4j:log4j-api:2.19.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.19.0'
    implementation "net.serenity-bdd:serenity-core:${serenityCoreVersion}",
            "net.serenity-bdd:serenity-screenplay:${serenityCoreVersion}",
            "net.serenity-bdd:serenity-screenplay-rest:${serenityCoreVersion}",
            "net.serenity-bdd:serenity-screenplay-webdriver:${serenityCoreVersion}",
            "net.serenity-bdd:serenity-ensure:${serenityCoreVersion}"

    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}",
            "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}",
            "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    testImplementation "net.serenity-bdd:serenity-cucumber6:${serenityCucumberVersion}",
            "junit:junit:${junitVersion}",
            "org.hamcrest:hamcrest-all:1.3"

}
test {
    testLogging.showStandardStreams = true
    systemProperties System.getProperties()
    maxParallelForks = 8
}

tasks.withType(Test) {
    maxParallelForks = Runtime.runtime.availableProcessors()
}

wrapper {
    gradleVersion = '9.0.1'
}

gradle.startParameter.continueOnFailure = true
test.finalizedBy(aggregate, reports)
